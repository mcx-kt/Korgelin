buildscript {
    apply from: "../buildSrc/config.gradle.kts"
    repositories {
        jcenter()
        maven {
            name "forge"
            url "http://files.minecraftforge.net/maven/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
    }
}

plugins {
    id "maven"
    id "com.github.johnrengelman.shadow" version "4.0.4"
    id "com.jfrog.bintray" version "1.8.4"
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.2.0'
}

apply plugin: "kotlin"
apply plugin: "net.minecraftforge.gradle"
apply from: "../buildSrc/config.gradle.kts"

archivesBaseName = modName + '-' + mc_version
version = modVersion + '-' + kotlinVersion

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    mappings = mcp_mappings

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                
            }
        }

        testClient {
            parent runs.client

            mods {
                KorgelinTest {
                    source sourceSets.test
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    jcenter()
}

dependencies {
    minecraft "net.minecraftforge:forge:$mc_version-$forge_version"
    implementation group: "org.jetbrains.kotlin", name: "kotlin-stdlib", version: kotlinVersion
    implementation group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk8", version: kotlinVersion
    implementation group: "org.jetbrains.kotlin", name: "kotlin-reflect", version: kotlinVersion
    implementation group: "org.jetbrains", name: "annotations", version: annotationsVersion
    implementation group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-core", version: coroutineVersion
    implementation group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-jdk8", version: coroutineVersion
    implementation group: "org.jetbrains.kotlinx", name: "kotlinx-serialization-runtime", version: serializationVersion
}

jar {
    manifest {
        attributes([
                'FMLModType': 'LANGPROVIDER'
        ])

        attributes(['Specification-Title': 'Mod Language Provider',
                    'Specification-Vendor': 'Forge',
                    'Specification-Version': '1.0',
                    'Implementation-Title': modName,
                    'Implementation-Version': version,
                    'Implementation-Vendor' :'toliner',
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


shadowJar {
    classifier = ""
    dependencies {
        include(dependency("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"))
        include(dependency("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"))
        include(dependency("org.jetbrains:annotations:${annotationsVersion}"))
        include(dependency("org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutineVersion}"))
        include(dependency("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:${coroutineVersion}"))
        include(dependency("org.jetbrains.kotlinx:kotlinx-serialization-runtime:${serializationVersion}"))
    }
}

tasks.build.dependsOn shadowJar

artifacts {
    archives shadowJar
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

publishing {
    publications {
        mavenKotlin(MavenPublication) {
            from components.java
            artifact sourcesJar
            pom {
                name = 'Korgelin'
                description = 'A Kotlin language adaptor for Minecraft Forge'
                url = 'https://minecraft.curseforge.com/projects/korgelin'
                licenses {
                    license {
                        name = 'GNU LESSER GENERAL PUBLIC LICENSE v3.0'
                        url = 'https://www.gnu.org/licenses/lgpl-3.0.en.html'
                    }
                }
                developers {
                    developer {
                        id = 'toliner'
                        name = 'toliner'
                        email = 'toliner.rkt@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/toliner/Korgelin.git'
                    developerConnection = 'scm:git:ssh://github.com/toliner/Korgelin.git'
                    url = 'https://github.com/toliner/Korgelin'
                }
            }
        }
    }
}

if(System.getenv("bintray-api-key") != null || System.getenv()["bintray-api-key"] != null || project.hasProperty("bintrayApiKey")) {
    bintray {
        user = System.getenv("bintray-api-key") ?: System.getenv()["bintray-api-key"] ?: project.findProperty("bintrayApiKey")
        key = System.getenv("bintray-user") ?: System.getenv()["bintray-user"] ?: project.findProperty("bintrayUser")
        publications = ['mavenKotlin']
        pkg {
            repo = 'Korgelin'
            name = 'Korgelin-1.13'
            version {
                name = version
                desc = "Korgelin: $modVersion, Kotlin: $kotlinVersion, Annotations: $annotationsVersion, Coroutines: $coroutineVersion, Serialization: $serializationVersion"
                released  = new Date()
            }
        }
    }
} else {
    logger.log(LogLevel.WARN, "Bintray API Key was not found. Skip.")
    logger.log(LogLevel.WARN, project.properties.keySet().join(", "))
}


if(System.getenv("curseforge-api-key") != null || System.getenv()["curseforge-api-key"] != null || project.hasProperty("curseforgeApiKey")) {
    curseforge {
        apiKey = System.getenv("curseforge-api-key") ?: System.getenv()["curseforge-api-key"] ?: project.findProperty("curseforgeApiKey")
        project {
            id = '320501'
            changelog = "Korgelin: $modVersion, Kotlin: $kotlinVersion, Annotations: $annotationsVersion, Coroutines: $coroutineVersion, Serialization: $serializationVersion"
            releaseType = 'release'
            // addGameVersion '1.13.2'
            mainArtifact jar
        }
    }
} else {
    logger.log(LogLevel.WARN, "CurseForge API Key was not found. Skip.")
}
