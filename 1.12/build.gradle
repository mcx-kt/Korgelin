buildscript {
    apply from: "../buildSrc/config.gradle.kts"
    repositories {
        jcenter()
        maven {
            name "forge"
            url "http://files.minecraftforge.net/maven/"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
    }
}

plugins {
    id "maven"
    id "com.github.johnrengelman.shadow" version "4.0.4"
    id "com.jfrog.bintray" version "1.8.4"
    id 'maven-publish'
    id 'com.matthewprenger.cursegradle' version '1.2.0'
}

apply plugin: "kotlin"
apply plugin: "net.minecraftforge.gradle.forge"
apply from: "../buildSrc/config.gradle.kts"

archivesBaseName = modName + '-' + mc_version
version = modVersion + '-' + kotlinVersion
group = "net.toliner.korgelin"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    version = mc_version + "-" + forge_version
    runDir = "run"

    mappings = mcp_mappings

    replaceIn "Korgelin.kt"
    replace "@VERSION@", modVersion

    useDepAts = true
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from (sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
        expand "version": project.version, "mcversion": mc_version
    }
    from (sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

repositories {
    jcenter()
}

dependencies {
    implementation group: "org.jetbrains.kotlin", name: "kotlin-stdlib", version: kotlinVersion
    implementation group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk8", version: kotlinVersion
    implementation group: "org.jetbrains.kotlin", name: "kotlin-reflect", version: kotlinVersion
    implementation group: "org.jetbrains", name: "annotations", version: annotationsVersion
    implementation group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-core", version: coroutineVersion
    implementation group: "org.jetbrains.kotlinx", name: "kotlinx-coroutines-jdk8", version: coroutineVersion
    implementation group: "org.jetbrains.kotlinx", name: "kotlinx-serialization-runtime", version: serializationVersion
}

jar {
    manifest {
        attributes "FMLCorePlugin": "net.toliner.korgelin.preloader.KorgelinPlugin",
                "FMLCorePluginContainsFMLMod": "true"
    }
}

shadowJar {
    classifier = ""
    dependencies {
        include(dependency("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"))
        include(dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"))
        include(dependency("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"))
        include(dependency("org.jetbrains:annotations:${annotationsVersion}"))
        include(dependency("org.jetbrains.kotlinx:kotlinx-coroutines-core:${coroutineVersion}"))
        include(dependency("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:${coroutineVersion}"))
        include(dependency("org.jetbrains.kotlinx:kotlinx-serialization-runtime:${serializationVersion}"))
    }
    manifest {
        attributes "FMLCorePlugin": "net.toliner.korgelin.preloader.KorgelinPlugin",
                "FMLCorePluginContainsFMLMod": "true"
    }
}

tasks.build.dependsOn shadowJar

artifacts {
    archives shadowJar
}

reobf {
    shadowJar {
        mappingType = "SEARGE"
    }
}
tasks.reobfShadowJar.mustRunAfter shadowJar
tasks.build.dependsOn reobfShadowJar

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

publishing {
    publications {
        mavenKotlin(MavenPublication) {
            from components.java
            artifact sourcesJar
            pom {
                name = 'Korgelin'
                description = 'A Kotlin language adaptor for Minecraft Forge'
                url = 'https://minecraft.curseforge.com/projects/korgelin'
                licenses {
                    license {
                        name = 'GNU LESSER GENERAL PUBLIC LICENSE v3.0'
                        url = 'https://www.gnu.org/licenses/lgpl-3.0.en.html'
                    }
                }
                developers {
                    developer {
                        id = 'toliner'
                        name = 'toliner'
                        email = 'toliner.rkt@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/toliner/Korgelin.git'
                    developerConnection = 'scm:git:ssh://github.com/toliner/Korgelin.git'
                    url = 'https://github.com/toliner/Korgelin'
                }
            }
        }
    }
}

if(System.getenv("bintray-api-key") != null || System.getenv()["bintray-api-key"] != null || project.hasProperty("bintrayApiKey")) {
    bintray {
        key = System.getenv("bintray-api-key") ?: System.getenv()["bintray-api-key"] ?: project.findProperty("bintrayApiKey")
        user = System.getenv("bintray-user") ?: System.getenv()["bintray-user"] ?: project.findProperty("bintrayUser")
        publications = ['mavenKotlin']
        publish = true
        pkg {
            repo = 'Korgelin'
            name = 'Korgelin-1.12'
            version {
                name = project.version
                desc = "Korgelin: $modVersion, Kotlin: $kotlinVersion, Annotations: $annotationsVersion, Coroutines: $coroutineVersion, Serialization: $serializationVersion"
                released  = new Date()
            }
        }
    }
} else {
    logger.log(LogLevel.WARN, "Bintray API Key was not found. Skip.")
}


if(System.getenv("curseforge-api-key") != null || System.getenv()["curseforge-api-key"] != null || project.hasProperty("curseforgeApiKey")) {
    curseforge {
        apiKey = System.getenv("curseforge-api-key") ?: System.getenv()["curseforge-api-key"] ?: project.findProperty("curseforgeApiKey")
        project {
            id = '320501'
            changelog = "Korgelin: $modVersion, Kotlin: $kotlinVersion, Annotations: $annotationsVersion, Coroutines: $coroutineVersion, Serialization: $serializationVersion"
            releaseType = 'release'
            // addGameVersion '1.12.2'
            mainArtifact jar
        }
    }
} else {
    logger.log(LogLevel.WARN, "CurseForge API Key was not found. Skip.")
}